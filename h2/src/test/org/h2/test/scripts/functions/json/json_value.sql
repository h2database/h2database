-- Copyright 2004-2025 H2 Group. Multiple-Licensed under the MPL 2.0,
-- and the EPL 1.0 (https://h2database.com/html/license.html).
-- Initial Developer: H2 Group
--

EXPLAIN SELECT JSON_VALUE(J, 'lax $.name'), JSON_VALUE(J, 'lax $.name' RETURNING CHARACTER VARYING)
    FROM (VALUES JSON '{"name": "Name"}') T(J);
>> SELECT JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING), JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING) FROM (VALUES (JSON '{"name":"Name"}')) "T"("J") /* table scan */

EXPLAIN SELECT
    JSON_VALUE(J, 'lax $.name' ERROR ON EMPTY),
    JSON_VALUE(J, 'lax $.name' NULL ON EMPTY),
    JSON_VALUE(J, 'lax $.name' DEFAULT '' ON EMPTY)
    FROM (VALUES JSON '{"name": "Name"}') T(J);
>> SELECT JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING ERROR ON EMPTY), JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING), JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING DEFAULT '' ON EMPTY) FROM (VALUES (JSON '{"name":"Name"}')) "T"("J") /* table scan */

EXPLAIN SELECT
    JSON_VALUE(J, 'lax $.name' ERROR ON ERROR),
    JSON_VALUE(J, 'lax $.name' NULL ON ERROR),
    JSON_VALUE(J, 'lax $.name' DEFAULT '' ON ERROR)
    FROM (VALUES JSON '{"name": "Name"}') T(J);
>> SELECT JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING ERROR ON ERROR), JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING), JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING DEFAULT '' ON ERROR) FROM (VALUES (JSON '{"name":"Name"}')) "T"("J") /* table scan */

EXPLAIN SELECT
    JSON_VALUE(J, 'lax $.name' ERROR ON EMPTY ERROR ON ERROR),
    JSON_VALUE(J, 'lax $.name' ERROR ON EMPTY NULL ON ERROR),
    JSON_VALUE(J, 'lax $.name' ERROR ON EMPTY DEFAULT '' ON ERROR)
    FROM (VALUES JSON '{"name": "Name"}') T(J);
>> SELECT JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING ERROR ON EMPTY ERROR ON ERROR), JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING ERROR ON EMPTY), JSON_VALUE("J", 'lax $.name' RETURNING CHARACTER VARYING ERROR ON EMPTY DEFAULT '' ON ERROR) FROM (VALUES (JSON '{"name":"Name"}')) "T"("J") /* table scan */

SELECT JSON_VALUE(JSON '"test"', '$');
>> test

SELECT JSON_VALUE(JSON 'true', '$' RETURNING BOOLEAN);
>> TRUE

SELECT JSON_VALUE(JSON '"true"', '$' RETURNING BOOLEAN);
>> null

SELECT JSON_VALUE(JSON '100.01', '$' RETURNING NUMERIC(5, 2));
>> 100.01

SELECT JSON_VALUE(JSON '"2024-12-31"', '$' RETURNING DATE);
>> null

SELECT JSON_VALUE(JSON '"2024-12-31"', '$.datetime("YYYY-MM-DD")' RETURNING DATE);
>> 2024-12-31

SELECT JSON_VALUE(JSON '["2024-12-31"]', '$.datetime("YYYY-MM-DD")' RETURNING DATE);
>> 2024-12-31

SELECT JSON_VALUE(JSON '["2024-12-31"]', 'strict $.datetime("YYYY-MM-DD")' RETURNING DATE);
>> null

SELECT JSON_VALUE(JSON '"10:11:33"', '$.datetime("HH24:MI:SS")' RETURNING TIME);
>> 10:11:33

SELECT JSON_VALUE(JSON '"10:11:33 +10:00"', '$.datetime("HH24:MI:SS TZH:TZM")' RETURNING TIME WITH TIME ZONE);
>> 10:11:33+10

SELECT JSON_VALUE(JSON '"2024-12-31 10:11:33"', '$.datetime("YYYY-MM-DD HH24:MI:SS")' RETURNING TIMESTAMP);
>> 2024-12-31 10:11:33

SELECT JSON_VALUE(JSON '"2024-12-31 10:11:33 +10:00"', '$.datetime("YYYY-MM-DD HH24:MI:SS TZH:TZM")' RETURNING TIMESTAMP WITH TIME ZONE);
>> 2024-12-31 10:11:33+10

SELECT JSON_VALUE(JSON '[1]', 'strict $[1]' RETURNING INTEGER DEFAULT -1 ON ERROR);
>> -1

SELECT JSON_VALUE(JSON '[1]', 'strict $[1]' RETURNING INTEGER ERROR ON ERROR);
> exception INVALID_VALUE_2

SELECT JSON_VALUE(JSON '[]', 'strict $[*]' RETURNING INTEGER);
>> null

SELECT JSON_VALUE(JSON '[]', 'strict $[*]' RETURNING INTEGER ERROR ON EMPTY);
> exception INVALID_VALUE_2

SELECT JSON_VALUE(JSON '"a"', 'strict $' RETURNING INTEGER ERROR ON ERROR);
> exception DATA_CONVERSION_ERROR_1

SELECT JSON_VALUE(JSON '[null]', 'strict $[*]' RETURNING INTEGER ERROR ON ERROR);
>> null

SELECT JSON_VALUE(JSON '"2024-12-31"', '$.datetime("YYYY-MM-DD")');
>> null

SELECT JSON_VALUE(JSON '"2024-12-31"', '$.datetime("YYYY-MM-DD")' ERROR ON ERROR);
> exception INVALID_VALUE_2

SELECT JSON_VALUE(JSON '[1, 2]', '$[*]' RETURNING INTEGER);
>> null

SELECT JSON_VALUE(JSON '[1, 2]', '$[*]' RETURNING INTEGER ERROR ON ERROR);
> exception INVALID_VALUE_2

SELECT JSON_VALUE(JSON '["2024-01-02", "2024-01-03"]',
    'strict $[*].datetime("YYYY-MM-DD") ? (@ < $[1].datetime("YYYY-MM-DD"))' RETURNING DATE);
>> 2024-01-02

SELECT JSON_VALUE(JSON '["2024-01-02", "2024-01-03"]',
    'strict $[*].datetime("YYYY-MM-DD") ? (@ < "1"))' RETURNING DATE);
>> null
